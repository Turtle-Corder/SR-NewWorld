diff a/SR-Team/Client/Codes/MeteorVolcano.cpp b/SR-Team/Client/Codes/MeteorVolcano.cpp	(rejected hunks)
@@ -1,186 +1,186 @@
 #include "stdafx.h"
 #include "..\Headers\MeteorVolcano.h"
-
-USING(Client)
-
-CMeteorVolcano::CMeteorVolcano(LPDIRECT3DDEVICE9 _pDevice)
-	:CGameObject(_pDevice)
-{
-}
-
-CMeteorVolcano::CMeteorVolcano(const CMeteorVolcano & _rOther)
-	: CGameObject(_rOther)
-{
-}
-
-HRESULT CMeteorVolcano::Setup_GameObject_Prototype()
-{
-	return S_OK;
-}
-
-HRESULT CMeteorVolcano::Setup_GameObject(void * _pArg)
-{
-	if (_pArg)
-	{
-		m_tImpact = *(INSTANTIMPACT*)_pArg;
-		m_fInitDelay *= m_tImpact.vOption.x * 0.1f;
-	}
-
-	if (FAILED(Add_Component()))
-		return E_FAIL;
-
-
-	return S_OK;
-}
-
-_int CMeteorVolcano::Update_GameObject(_float _fDeltaTime)
-{
-	if (m_bDead)
-		return GAMEOBJECT::DEAD;
-
-	// falldown
-	_vec3 vAddPos = _vec3(0.f, 2.5f, 0.f) * m_pTransformComp->Get_Desc().fSpeedPerSecond * _fDeltaTime;
-	m_pTransformComp->Set_Position(m_pTransformComp->Get_Desc().vPosition + vAddPos);
-	if (m_pTransformComp->Get_Desc().vPosition.y > 14.f)
-		m_bDead = true;
-
-	m_fScale -= _fDeltaTime * 2.f;
-
-	_vec3 vScale = { m_fScale , m_fScale  ,m_fScale };
-
-	m_pTransformComp->Set_Scale(vScale);
-
-	m_pTransformComp->Update_Transform();
-
-
-	return GAMEOBJECT::NOEVENT;
-}
-
-_int CMeteorVolcano::LateUpdate_GameObject(_float _fDeltaTime)
-{
-
-	CManagement* pManagement = CManagement::Get_Instance();
-	if (nullptr == pManagement)
-		return GAMEOBJECT::ERR;
-
-	if (FAILED(pManagement->Add_RendererList(CRenderer::RENDER_NONEALPHA, this)))
-		return  GAMEOBJECT::WARN;
-
-	return GAMEOBJECT::NOEVENT;
-}
-
-HRESULT CMeteorVolcano::Render_NoneAlpha()
-{
-	CManagement* pManagement = CManagement::Get_Instance();
-	if (nullptr == pManagement)
-		return GAMEOBJECT::ERR;
-
-	CCamera* pCamera = (CCamera*)pManagement->Get_GameObject(pManagement->Get_CurrentSceneID(), L"Layer_Camera");
-
-	if (nullptr == pCamera)
-		return E_FAIL;
-
-	if (FAILED(m_pVIBufferComp->Set_Transform(&m_pTransformComp->Get_Desc().matWorld, pCamera)))
-		return E_FAIL;
-
-	if (FAILED(m_pTextureComp->SetTexture(0)))
-		return E_FAIL;
-
-	if (FAILED(m_pVIBufferComp->Render_VIBuffer()))
-		return E_FAIL;
-
-	return S_OK;
-}
-
-HRESULT CMeteorVolcano::Add_Component()
-{
-	CTransform::TRANSFORM_DESC tTransformDesc;
-	tTransformDesc.vPosition = { m_tImpact.vPosition.x, m_tImpact.vPosition.y - 12.f ,m_tImpact.vPosition.z };
-
-	m_fScale = m_tImpact.vOption.y;
-	tTransformDesc.vScale = { m_fScale, m_fScale, m_fScale };
-	tTransformDesc.vRotate = { D3DXToRadian(_float(rand() % 90)), D3DXToRadian(_float(rand() % 90)), D3DXToRadian(_float(rand() % 90)) };
-	tTransformDesc.fSpeedPerSecond = 10.f;
-	tTransformDesc.fRotatePerSecond = D3DXToRadian(90.f);
-
-	CSphereCollider::COLLIDER_DESC tCollDesc;
-	tCollDesc.vPosition = tTransformDesc.vPosition;
-	tCollDesc.fRadius = 0.5f;
-
-	CStatus::STAT tStat;
-	tStat.iMinAtt = 10; tStat.iMaxAtt = 10;
-
-	if (FAILED(CGameObject::Add_Component(SCENE_STATIC, L"Component_VIBuffer_CubeTexture", L"Com_VIBuffer", (CComponent**)&m_pVIBufferComp)))
-		return E_FAIL;
-
-	if (FAILED(CGameObject::Add_Component(SCENE_STATIC, L"Component_Texture_IceBlast", L"Com_Texture", (CComponent**)&m_pTextureComp)))
-		return E_FAIL;
-
-	if (FAILED(CGameObject::Add_Component(SCENE_STATIC, L"Component_Transform", L"Com_Transform", (CComponent**)&m_pTransformComp, &tTransformDesc)))
-		return E_FAIL;
-
-
-	
-
-	return S_OK;
-}
-
-void CMeteorVolcano::Update_InitDelay(_float _fDeltaTime)
-{
-	if (!IsActive())
-	{
-		m_fInitTimer += _fDeltaTime;
-		if (m_fInitTimer >= m_fInitDelay)
-			Set_Active();
-	}
-}
-
-void CMeteorVolcano::Update_DeadDelay(_float _fDeltaTime)
-{
-	if (IsActive() && !m_bDead)
-	{
-		m_fDeadTimer += _fDeltaTime;
-		if (m_fDeadTimer >= m_fDeadDelay)
-			m_bDead = true;
-	}
-}
-
-
-
-
-CGameObject * CMeteorVolcano::Clone_GameObject(void * _pArg)
-{
-	CMeteorVolcano* pInstance = new CMeteorVolcano(*this);
-
-	if (FAILED(pInstance->Setup_GameObject(_pArg)))
-	{
-		PRINT_LOG(L"Failed To Create EnergyBolt Clone", LOG::CLIENT);
-		Safe_Release(pInstance);
-	}
-
-	return pInstance;
-}
-
-void CMeteorVolcano::Free()
-{
-	Safe_Release(m_pVIBufferComp);
-	Safe_Release(m_pTransformComp);
-	Safe_Release(m_pTextureComp);
-
-	CGameObject::Free();
-}
-
-CMeteorVolcano * CMeteorVolcano::Create(LPDIRECT3DDEVICE9 _pDevice)
-{
-	if (nullptr == _pDevice)
-		return nullptr;
-
-	CMeteorVolcano* pInstance = new CMeteorVolcano(_pDevice);
-	if (FAILED(pInstance->Setup_GameObject_Prototype()))
-	{
-		PRINT_LOG(L"Failed To Create CIceBlast", LOG::CLIENT);
-		Safe_Release(pInstance);
-	}
-
-	return pInstance;
-}
+//
+//USING(Client)
+//
+//CMeteorVolcano::CMeteorVolcano(LPDIRECT3DDEVICE9 _pDevice)
+//	:CGameObject(_pDevice)
+//{
+//}
+//
+//CMeteorVolcano::CMeteorVolcano(const CMeteorVolcano & _rOther)
+//	: CGameObject(_rOther)
+//{
+//}
+//
+//HRESULT CMeteorVolcano::Setup_GameObject_Prototype()
+//{
+//	return S_OK;
+//}
+//
+//HRESULT CMeteorVolcano::Setup_GameObject(void * _pArg)
+//{
+//	if (_pArg)
+//	{
+//		m_tImpact = *(INSTANTIMPACT*)_pArg;
+//		m_fInitDelay *= m_tImpact.vOption.x * 0.1f;
+//	}
+//
+//	if (FAILED(Add_Component()))
+//		return E_FAIL;
+//
+//
+//	return S_OK;
+//}
+//
+//_int CMeteorVolcano::Update_GameObject(_float _fDeltaTime)
+//{
+//	if (m_bDead)
+//		return GAMEOBJECT::DEAD;
+//
+//	// falldown
+//	_vec3 vAddPos = _vec3(0.f, 2.5f, 0.f) * m_pTransformComp->Get_Desc().fSpeedPerSecond * _fDeltaTime;
+//	m_pTransformComp->Set_Position(m_pTransformComp->Get_Desc().vPosition + vAddPos);
+//	if (m_pTransformComp->Get_Desc().vPosition.y > 14.f)
+//		m_bDead = true;
+//
+//	m_fScale -= _fDeltaTime * 2.f;
+//
+//	_vec3 vScale = { m_fScale , m_fScale  ,m_fScale };
+//
+//	m_pTransformComp->Set_Scale(vScale);
+//
+//	m_pTransformComp->Update_Transform();
+//
+//
+//	return GAMEOBJECT::NOEVENT;
+//}
+//
+//_int CMeteorVolcano::LateUpdate_GameObject(_float _fDeltaTime)
+//{
+//
+//	CManagement* pManagement = CManagement::Get_Instance();
+//	if (nullptr == pManagement)
+//		return GAMEOBJECT::ERR;
+//
+//	if (FAILED(pManagement->Add_RendererList(CRenderer::RENDER_NONEALPHA, this)))
+//		return  GAMEOBJECT::WARN;
+//
+//	return GAMEOBJECT::NOEVENT;
+//}
+//
+//HRESULT CMeteorVolcano::Render_NoneAlpha()
+//{
+//	CManagement* pManagement = CManagement::Get_Instance();
+//	if (nullptr == pManagement)
+//		return GAMEOBJECT::ERR;
+//
+//	CCamera* pCamera = (CCamera*)pManagement->Get_GameObject(pManagement->Get_CurrentSceneID(), L"Layer_Camera");
+//
+//	if (nullptr == pCamera)
+//		return E_FAIL;
+//
+//	if (FAILED(m_pVIBufferComp->Set_Transform(&m_pTransformComp->Get_Desc().matWorld, pCamera)))
+//		return E_FAIL;
+//
+//	if (FAILED(m_pTextureComp->SetTexture(0)))
+//		return E_FAIL;
+//
+//	if (FAILED(m_pVIBufferComp->Render_VIBuffer()))
+//		return E_FAIL;
+//
+//	return S_OK;
+//}
+//
+//HRESULT CMeteorVolcano::Add_Component()
+//{
+//	CTransform::TRANSFORM_DESC tTransformDesc;
+//	tTransformDesc.vPosition = { m_tImpact.vPosition.x, m_tImpact.vPosition.y - 12.f ,m_tImpact.vPosition.z };
+//
+//	m_fScale = m_tImpact.vOption.y;
+//	tTransformDesc.vScale = { m_fScale, m_fScale, m_fScale };
+//	tTransformDesc.vRotate = { D3DXToRadian(_float(rand() % 90)), D3DXToRadian(_float(rand() % 90)), D3DXToRadian(_float(rand() % 90)) };
+//	tTransformDesc.fSpeedPerSecond = 10.f;
+//	tTransformDesc.fRotatePerSecond = D3DXToRadian(90.f);
+//
+//	CSphereCollider::COLLIDER_DESC tCollDesc;
+//	tCollDesc.vPosition = tTransformDesc.vPosition;
+//	tCollDesc.fRadius = 0.5f;
+//
+//	CStatus::STAT tStat;
+//	tStat.iMinAtt = 10; tStat.iMaxAtt = 10;
+//
+//	if (FAILED(CGameObject::Add_Component(SCENE_STATIC, L"Component_VIBuffer_CubeTexture", L"Com_VIBuffer", (CComponent**)&m_pVIBufferComp)))
+//		return E_FAIL;
+//
+//	if (FAILED(CGameObject::Add_Component(SCENE_STATIC, L"Component_Texture_IceBlast", L"Com_Texture", (CComponent**)&m_pTextureComp)))
+//		return E_FAIL;
+//
+//	if (FAILED(CGameObject::Add_Component(SCENE_STATIC, L"Component_Transform", L"Com_Transform", (CComponent**)&m_pTransformComp, &tTransformDesc)))
+//		return E_FAIL;
+//
+//
+//	
+//
+//	return S_OK;
+//}
+//
+//void CMeteorVolcano::Update_InitDelay(_float _fDeltaTime)
+//{
+//	if (!IsActive())
+//	{
+//		m_fInitTimer += _fDeltaTime;
+//		if (m_fInitTimer >= m_fInitDelay)
+//			Set_Active();
+//	}
+//}
+//
+//void CMeteorVolcano::Update_DeadDelay(_float _fDeltaTime)
+//{
+//	if (IsActive() && !m_bDead)
+//	{
+//		m_fDeadTimer += _fDeltaTime;
+//		if (m_fDeadTimer >= m_fDeadDelay)
+//			m_bDead = true;
+//	}
+//}
+//
+//
+//
+//
+//CGameObject * CMeteorVolcano::Clone_GameObject(void * _pArg)
+//{
+//	CMeteorVolcano* pInstance = new CMeteorVolcano(*this);
+//
+//	if (FAILED(pInstance->Setup_GameObject(_pArg)))
+//	{
+//		PRINT_LOG(L"Failed To Create EnergyBolt Clone", LOG::CLIENT);
+//		Safe_Release(pInstance);
+//	}
+//
+//	return pInstance;
+//}
+//
+//void CMeteorVolcano::Free()
+//{
+//	Safe_Release(m_pVIBufferComp);
+//	Safe_Release(m_pTransformComp);
+//	Safe_Release(m_pTextureComp);
+//
+//	CGameObject::Free();
+//}
+//
+//CMeteorVolcano * CMeteorVolcano::Create(LPDIRECT3DDEVICE9 _pDevice)
+//{
+//	if (nullptr == _pDevice)
+//		return nullptr;
+//
+//	CMeteorVolcano* pInstance = new CMeteorVolcano(_pDevice);
+//	if (FAILED(pInstance->Setup_GameObject_Prototype()))
+//	{
+//		PRINT_LOG(L"Failed To Create CIceBlast", LOG::CLIENT);
+//		Safe_Release(pInstance);
+//	}
+//
+//	return pInstance;
+//}
